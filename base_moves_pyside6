# -*- coding: utf-8 -*-
import sys
import yaml
from time import strftime,sleep
from datetime import datetime
import matplotlib.pyplot as plt

import numpy as np
# import bitstring
from bitstring import *
import random


# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
                    PySide6
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
"""Ui_Dialog - класс из другого py файла, сгенерированного из ui файла программы QtDesigner."""
from PySide6 import QtCore, QtGui, QtWidgets

from auto_generated.Dialog_win import Ui_Dialog


    def show_window(text):
        """Создание и отображение вспылающего окна с текстом.



        Args:
            text: строка текста, которая будет отображена в всплывающем окне.

        """
        Dialog = QtWidgets.QDialog()
        ui_dialog = Ui_Dialog()
        ui_dialog.setupUi(Dialog)

        ui_dialog.label.setText(text)

        Dialog.setWindowModality(QtCore.Qt.ApplicationModal)  # что-то про фокус на окно, остальные блокируются
        Dialog.show()
        Dialog.exec()




from PyQt5 import QtCore, QtGui, QtWidgets



        отображение в mainwindow какую кнопку нажали в диалоговом окне

rsp = dialog.exec_()
if rsp == QtWidgets.Qdialog.Accepted:
        self.label.setText("Ok button was clicked")
else:
        self.label.setText("Cancel button was clicked")

#       Сигналы

self.ui.btn_7.clicked.connect(lambda: self.ui.write_number(self.ui.btn_7.text()))



#------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------#
#---------                                                                       ---------#
#---                    Работа с виджетом LineEdit                                  ---#
#---------
#-------------------------------------               -------------------------------------#
#-----------------------------------------------------------------------------------------#

name_poz = str(self.poz_app.displayText())

# установка текста в строку
self.poz_app.setText(str(self.data[ind].get(ind).get('name_poz')))



#------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------#
#---------                                                                       ---------#
#---                    Работа с виджетом Button                                  ---#
#---------
#-------------------------------------               -------------------------------------#
#-----------------------------------------------------------------------------------------#

# установка состояния кнопки в активное
self.ui.b_to_step3_1.setEnabled(True)
self.ui.b_to_step3_2.setEnabled(False)
self.ui.edit_param.setEnabled(False)


class PushButton_flag_event_mdd(QtWidgets.QPushButton):
    """PushButton_flag_event_mdd - собственный виджет-кнопка.
    """
    def __init__(self, parent=None):
        super(PushButton_flag_event_mdd, self).__init__(parent)
        self.setIcon(QtGui.QIcon("img/forbidden.png"))
        self.setCheckable(True)

    def mousePressEvent(self, event):
        super(PushButton_flag_event_mdd, self).mousePressEvent(event)
        self.setIcon(
            QtGui.QIcon("img/forbidden.png" if self.isChecked() else "img/accept.png")
        )
        print("button ", self.isChecked())

# применение собественного класса при создании виджета и задание для него настреок
 self.ui.b_flag_limit_mdd_choose = PushButton_flag_event_mdd(self.ui.centralwidget)
        self.ui.b_flag_limit_mdd_choose.setMinimumSize(QtCore.QSize(20, 25))
        self.ui.b_flag_limit_mdd_choose.setMaximumSize(QtCore.QSize(35, 25))
        self.ui.horizontalLayout_flag_limit_mdd.addWidget(self.ui.b_flag_limit_mdd_choose)

#------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------#
#---------                                                                       ---------#
#---                    Работа с виджетом Checkbox                                     ---#
#---------
#-------------------------------------               -------------------------------------#
#-----------------------------------------------------------------------------------------#
if not self.dict_check.get(1).isEnabled():

.isChecked() == True
    element.setChecked(False)
    element.setStyleSheet("color: pink")



#------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------#
#---------                                                                       ---------#
#---                    Работа с виджетом Radiobutton                                  ---#
#---------
#-------------------------------------               -------------------------------------#
#-----------------------------------------------------------------------------------------#
self.rb_tk_kt_type_group = QtWidgets.QButtonGroup()
        self.rb_tk_kt_type_group.addButton(self.rb_mpd)
        self.rb_tk_kt_type_group.addButton(self.rb_mad)
        self.rb_tk_kt_type_group.addButton(self.rb_mdd)
        self.rb_tk_kt_type_group.addButton(self.rb_ktdk)
        self.rb_tk_kt_type_group.addButton(self.rb_ktf)

        self.rb_tk_kt_type_group.buttonClicked.connect(self.on_rb_kt_type_clicked)

def on_rb_kt_type_clicked(self, button):
        self.exit_dict_MPM["kt_type_text"] = button.text()
        # print("button.text() = ", button.text())
        # print('self.exit_dict_MPM["kt_mnum"]', self.exit_dict_MPM["kt_mnum"])


#------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------#
#---------                                                                       ---------#
#---                    Работа с виджетом Combobox                                  ---#
#---------
#-------------------------------------               -------------------------------------#
#-----------------------------------------------------------------------------------------#

def accept(self, str_extra):
    self.exit_dict_MPM['reverse'] = str_extra
    # print(self.exit_dict_MPM["reverse"])
self.ui.extra_value.currentTextChanged.connect(self.accept)


    self.dict_combo_diap[index].setEditText(combo_diap_norm)
        itemText()
        self.combo.setCurrentIndex(self.index)

         if combo_diap_norm != self.dict_combo_diap[index].currentIndex():
            self.dict_combo_diap[index].setCurrentIndex(combo_diap_norm)


# удаление всех элементов и добавление списка элементов
                self.comboBox_2.clear()
                self.comboBox_2.addItems(list1)

     exit_list = self.conv_to_list(number_diap_smesh)
    combo_diap_norm = self.ui.combo_diap_norm.currentText().replace(',', '.')
    # combo_diap_norm = self.ui.combo_diap_norm.currentData()
    print("combo_diap_norm", combo_diap_norm)
    for index in exit_list:
        # self.dict_combo_diap[index].currentIndexChanged(combo_diap_norm)
        self.dict_combo_diap[index].setEditText(combo_diap_norm)
        # currentIndexChanged()
        print(self.dict_combo_diap[index].itemText(self.dict_combo_diap[index].currentIndex()))
    # print((float(self.dict_combo_diap[index].itemText(self.dict_combo_diap[index].currentIndex()).replace(',', '.'))))

self.exit_dict_MPM['extra'] = self.ui.extra_value.itemText(self.ui.extra_value.currentIndex())


ui.comboBox.currentText()ui.comboBox.currentData()
#------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------#
#---------                                                                       ---------#
#---                    Работа с виджетом Spinbox                                      ---#
#---------        ввод числа и использование format
#-------------------------------------               -------------------------------------#
#-----------------------------------------------------------------------------------------#
PySide2.QtWidgets.QSpinBox.value()¶
setValue(val)


#------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------#
#---------                                                                       ---------#
#---                    Работа с виджетом DoubleSpinBox                                ---#
#---------
#-------------------------------------               -------------------------------------#
#-----------------------------------------------------------------------------------------#

 spin_nach_smesh =  float(self.ui.spin_nach_smesh.text().replace(',', '.'))
                self.dict_spin[index].setValue(spin_nach_smesh)

self.dict_spin.get(index).setSingleStep(self.nach_smesh_step_analog)

self.dict_akk_mV.get(1).valueChanged.connect(self.akk_changed_for1)
        for i in range(1, 11):
            # print("here")
            (self.dict_akk_mV.get(i)).valueChanged.connect(lambda: self.akk_changed(i))
def akk_changed_for1(self):
            akk_read = float(self.dict_akk_mV.get(1).text().replace(',', '.'))
            print("akk_read", akk_read)

            akk_set_val = float(akk_read) / self.MPD_AKK_MZR_WEIGHT
            print("akk_set_val", akk_set_val)

            # self.dict_akk_mV.get(1).setValue(akk_set_val)

        def akk_changed(self, index):
            print("index", index)

            akk_read = float(self.dict_akk_mV.get(index).text().replace(',', '.'))
            print("akk_read", akk_read)
            akk_set_val = float(akk_read) / self.MPD_AKK_MZR_WEIGHT
            print("akk_set_val", akk_set_val)

            self.dict_akk_mV.get(index).setValue(akk_set_val)



#------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------#
#---------                                                                       ---------#
#---                    Работа с виджетом TableWidget                                  ---#
#---------
#-------------------------------------               -------------------------------------#
#-----------------------------------------------------------------------------------------#

ui.TableWidget.setItem(row, column, QtWidgets.QTableItem("item1"))





'''
                     Работа с строками
'''
# что-то не верное - надо првоерять
# Проверка введено ли что-то в поле e_analog (из виджета Entry библиотек tkinter)
if e_analog.get() in '<string>':

# And when looking for subsrings
any(i in '<string>' for i in ('11','22','33'))


#-----------------------------------------------------------------------------------------#
#---------                                                                       ---------#
# ---                  ФУНКЦИЯ преобразования строки чисел через , - и пробелы в список --#
#---    (ввод строки осуществляется например пользовтелем через виджет Entry)          ---#
#---------
#-------------------------------------               -------------------------------------#

# парсинг введеной строк - номеров в список
string = "1,   4   -5,   7,   8, 10   - 22, 18"
def conv_to_list(date):
    conv_list = []
    date = date.replace(' ', '')  # Можно добавить спец символы,которые следует удалять
    date = date.split(',')
    for x in date:
        print(x)
        if("-" in x):
            date_ = x.split('-')
            date_list_ = [num for num in range(int(date_[0]), int(date_[-1])+1)]
            conv_list = conv_list + date_list_
        else:
            conv_list.append(int(x))
            conv_list = list(set(conv_list))   # set -создает множество; list(set(conv_list)) - убирет повторы в списке
    return(conv_list)

print(conv_to_list(string))


# проверка не введена ли строка, если нет - запуск ф-ции перобразвоание ввода
if len(e_analog.get()) == 0:    # e_analog.get() -  введенная строка
    l_exit_analog['text'] = "Пустой ввод" + e_analog.get() + "\nПовторите ввод!!!"
    l_exit_analog['bg'] = bg_title_blue
else:
    exit_list = conv_to_list(e_analog.get())
    print("exit-list", exit_list)



 # создание label,расположение лейбла в горизонтальном layout, затем помещение layout в gridlayout
        self.ui.l_limit_mdd_1 = QtWidgets.QLabel(self.ui.centralwidget)  # в аргументе привязка к окну
        self.ui.l_limit_mdd_1.setText(str("1"))
        print(self.ui.l_limit_mdd_1)
        self.ui.l_limit_mdd_1.setAlignment(QtCore.Qt.AlignCenter)
        # self.ui.l_limit_mdd_1.selMinimumSize(QtCore.QSize(100,20))

        self.ui.limit_layout_mdd_1 = QtWidgets.QHBoxLayout()

        self.ui.limit_layout_mdd_1.addWidget(self.ui.l_limit_mdd_1)
        self.ui.gridLayout_limit_mdd.addLayout(self.ui.limit_layout_mdd_1, row, column)


 row, column = (1, 0)
        # for i in range(1, self.MDD_SENSOR_NUM+1):
        for i in range(1, 20):
            row += 1
            if (i - 1) % 16 == 0:
                row = 1; column += 1
            exec(f"self.ui.l_limit_mdd_{i} = QtWidgets.QLabel(self.ui.centralwidget)")
            exec(f"self.ui.l_limit_mdd_{i}.setText(str(i))")
            exec(f"self.ui.l_limit_mdd_{i}.setAlignment(QtCore.Qt.AlignCenter)")


            exec(f"self.ui.limit_layout_mdd_{i} = QtWidgets.QHBoxLayout()")

            exec(f"self.ui.limit_layout_mdd_{i}.addWidget(self.ui.l_limit_mdd_{i})")
            exec(f"self.ui.gridLayout_limit_mdd.addLayout(self.ui.limit_layout_mdd_{i}, row, column)")
            # self.ui.gridLayout_limit_mdd.setRowMinimumHeight(i, 1500)

#   создание класса своего виджета на сонове класса QtWidgets.QPushButton с переопределением функций
# при нажатии на кнопку изменяется состояние кнопки переключателя и устанавливается икнока в виде стрелки наверх или вниз

class PushButton_mdd(QtWidgets.QPushButton):
    def __init__(self, parent=None):
        super(PushButton_mdd, self).__init__(parent)
        self.setIcon(QtGui.QIcon("img/up-arrow.png"))
        self.setCheckable(True)  # кнопка является переключателем, с двумя состояниями

    def mousePressEvent(self, event):
        super(PushButton_mdd, self).mousePressEvent(event)
        self.setIcon(
            QtGui.QIcon("img/up-arrow.png" if self.isChecked() else "img/down-arrow.png")
        )
        print("button ", self.isChecked())  # button  False button  False button  False button  False button  False


# создание горизонтальног лейаута и помещение в него виджетов
            self.ui.limit_layout_mdd_{i} = QtWidgets.QHBoxLayout()
            self.ui.limit_layout_mdd_{i}.setSpacing(6)  # задание отступов между виджетами внутри горизонтального лейаута limit_layout_mdd_
            self.ui.limit_layout_mdd_{i}.addWidget(self.ui.l_limit_mdd_{i})


#  запуск программы с максимальным разворотом по экрану компьютера
MainWindow.setWindowState(QtCore.Qt.WindowMaximized)


#-----------------------------------------------------------------------------------------#
#---------                                                                       ---------#
# ---                  QSettings - сохранение пути к папке, при открытии файла          --#
#---                                                                                   ---#
#-------------------------------------               -------------------------------------#
KEY_LAST_DIR = 'last_dir' 
# прописывание названия организации и приложенния в натсроках Qt, для созданного приложения app
app.setOrganizationName('RC Module') 
app.setApplicationName('1234') 

settings = QtCore.QSettings() 
last_dir = str(settings.value(KEY_LAST_DIR, '.')) 
file_name = QtWidgets.QFileDialog.getOpenFileName( 
    self.ui.l_opened_file, 
    caption='Открыть бинарный файл', 
    dir=last_dir, 
    filter=FILE_FILTER, 
)[0] 
print('filename', file_name) 

if not file_name: 
    return 
settings.setValue(KEY_LAST_DIR, os.path.dirname(file_name)) 



#-----------------------------------------------------------------------------------------#
#---------                     Модуль pickle                                     ---------#
# ---          содание и просмотр дампов модуля pickle без ошибки и с ошибкой           --#
#---                                                                                   ---#
#-------------------------------------               -------------------------------------#
import pickle 

            tmp = self.collect_fields_convert_mdd() 
            kt_file = func.create_bin_file_mdd(tmp) 
            kt_type = KtTypeFileName.MDD.value 
        else: 
            self.show_window('Ошибка в типе КТ!') 
            QtCore.QCoreApplication.quit() 
 
        mnum = str(self.ExitKtInfoByKtType[self.kt_type_current].mnum) 
        time_str = strftime('_%d_%b_%Y_%S') 
        default_name = 'kt_' + kt_type + '_' + mnum + time_str 

        name_dump = os.path.join(last_dir, 'mdd_dump' + time_str + '.bin') 
        try: 
            # создание дампа - заполняем файл питон объектом tmp - в примере это словарь
            with open(name_dump, 'wb') as file_bin: 
                pickle.dump(tmp, file_bin) 
                

    file_name = 'C:\python\gui_kt_gen\KT\mdd_dump_25_Jan_2022_29.bin' 
    file_name2 = 'C:\python\gui_kt_gen\KT\mdd_dump_25_Jan_2022_43.bin' 
 # просматривать файлы удобно в режиме отладки
    with open(file_name, 'rb') as file_bin: 
        dict1 = pickle.load(file_bin) 
    with open(file_name2, 'rb') as file_bin: 
        dict2 = pickle.load(file_bin) 
